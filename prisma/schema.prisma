generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  quizzes   Quiz[]

  accounts  Account[]
  sessions  UserSession[]
  verificationTokens VerificationToken[]

  @@map("users")
}

model Quiz {
  id        String   @id @default(uuid())
  title     String
  source    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   
  user      User     @relation(fields: [userId], references: [id])
  questions Question[]
  sessions  Session[]

  @@map("quizzes")
}

model Question {
  id        String   @id @default(uuid())
  title     String
  type      String
  options   String[] @default([])
  answer    String
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  answers   Answer[]
  @@map("questions")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Int
  total     Int
  answers   Answer[]

  @@map("sessions")
}

model Answer {
  id        String   @id @default(uuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id])
  questionId String
  question  Question @relation(fields: [questionId], references: [id])
  answer    String
  isCorrect Boolean

  @@map("answers")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model UserSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@unique([identifier, token])
  @@map("verification_tokens")
}